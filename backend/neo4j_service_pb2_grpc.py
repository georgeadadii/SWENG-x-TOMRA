# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import neo4j_service_pb2 as neo4j__service__pb2


class Neo4jServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StoreResult = channel.stream_stream(
                '/Neo4jService/StoreResult',
                request_serializer=neo4j__service__pb2.ClassificationResult.SerializeToString,
                response_deserializer=neo4j__service__pb2.StoreResultResponse.FromString,
                )
        self.StoreMetrics = channel.stream_unary(
                '/Neo4jService/StoreMetrics',
                request_serializer=neo4j__service__pb2.MetricsResult.SerializeToString,
                response_deserializer=neo4j__service__pb2.StoreResultResponse.FromString,
                )
        self.GetFeedback = channel.unary_stream(
                '/Neo4jService/GetFeedback',
                request_serializer=neo4j__service__pb2.FeedbackRequest.SerializeToString,
                response_deserializer=neo4j__service__pb2.FeedbackResponse.FromString,
                )


class Neo4jServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StoreResult(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StoreMetrics(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFeedback(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Neo4jServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StoreResult': grpc.stream_stream_rpc_method_handler(
                    servicer.StoreResult,
                    request_deserializer=neo4j__service__pb2.ClassificationResult.FromString,
                    response_serializer=neo4j__service__pb2.StoreResultResponse.SerializeToString,
            ),
            'StoreMetrics': grpc.stream_unary_rpc_method_handler(
                    servicer.StoreMetrics,
                    request_deserializer=neo4j__service__pb2.MetricsResult.FromString,
                    response_serializer=neo4j__service__pb2.StoreResultResponse.SerializeToString,
            ),
            'GetFeedback': grpc.unary_stream_rpc_method_handler(
                    servicer.GetFeedback,
                    request_deserializer=neo4j__service__pb2.FeedbackRequest.FromString,
                    response_serializer=neo4j__service__pb2.FeedbackResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Neo4jService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Neo4jService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StoreResult(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Neo4jService/StoreResult',
            neo4j__service__pb2.ClassificationResult.SerializeToString,
            neo4j__service__pb2.StoreResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StoreMetrics(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Neo4jService/StoreMetrics',
            neo4j__service__pb2.MetricsResult.SerializeToString,
            neo4j__service__pb2.StoreResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFeedback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Neo4jService/GetFeedback',
            neo4j__service__pb2.FeedbackRequest.SerializeToString,
            neo4j__service__pb2.FeedbackResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
